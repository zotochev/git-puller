#!/usr/bin/env python3

import sys

import logging
import subprocess
from time import sleep
from pathlib import Path


log = logging.getLogger('git-puller')


class GitControl:
    def __init__(self, repository: Path):
        self._repository = repository
        self._is_git_repository(repository)

    def _is_git_repository(self, directory: Path) -> bool:
        if directory is None:
            return False

        try:
            directory.resolve(strict=True)
        except Exception as e:
            raise ValueError(f'Path not found: {e.__class__.__name__}: {e}')

        try:
            self._command('status')
        except subprocess.CalledProcessError as ae:
            log.debug(f'Not a git repository: {ae.__class__.__name__}: {ae}')
            raise ValueError(f'Not a git repository.')

    def _command(self, command: str) -> subprocess.CompletedProcess:
        p = subprocess.run(['git', '-C', f'{self._repository}', command], capture_output=True, encoding='utf8')
        p.check_returncode()
        return p

    def pull(self):
        p = self._command('pull')
        out = p.stdout.strip()

        if 'conflict' in out.lower():
            message = f'Pull triggered conflicts: \n{out}'
            log.error(message)
            raise ValueError(message)

        print('stdout:', out.strip())



def main(git_controller: GitControl):

    try:
        while True:
            git_controller.pull()
            sleep(5)
    except AssertionError as ae:
        log.error(f'{ae.__class__.__name__}: {ae}')
        raise


if __name__ == '__main__':
    d = None

    if len(sys.argv) == 1:
        d = Path.cwd()
    elif len(sys.argv) == 2:
        d = Path(sys.argv[1])
    else:
        log.error(f'Not expected number of arguments: {len(self.argv)}.')
        sys.exit(1)


    try:
        git_controller = GitControl(d)
        main(git_controller)
    except KeyboardInterrupt:
        log.info('Bye')
    except Exception as e:
        log.error(f'{e.__class__.__name__}: {e}')
        sys.exit(1)

